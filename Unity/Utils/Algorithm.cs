using System.Collections.Generic;
using UnityEngine;
using Prota;

namespace Prota.Unity
{
    public static partial class Algorithm
    {
        
        // Generated by chatGPT, modified. 
        // 输入 polygon 是逆时针排列的顶点.
        public static void Triangulate(
            List<Vector2> polygon,
            List<int> triangles)
        {
            void GetIndex(int i, int n, out int prev, out int cur, out int next)
            {
                prev = (i - 1).Repeat(n);
                cur = i.Repeat(n);
                next = (i + 1).Repeat(n);
            }
            
            // Helper function to check if a vertex is an ear
            bool IsEar(List<Vector2> polygon, List<int> vertices, int prev, int cur, int next)
            {
                var prevIndex = vertices[prev];
                var curIndex = vertices[cur];
                var nextIndex = vertices[next];
                
                var prevPos = polygon[prevIndex];
                var curPos = polygon[curIndex];
                var nextPos = polygon[nextIndex];
                
                // 判断这个三角是不是顺时针.
                // 是的话这个三角型是凹的, 肯定不是耳朵.
                var signedAngle = Vector2.SignedAngle(prevPos.To(curPos), curPos.To(nextPos));
                // Debug.LogError($"test index[{prevIndex},{curIndex},{nextIndex}] angle[{signedAngle}]");
                if(signedAngle < 0) return false;
                
                
                // 检查其它点是不是都在这个三角形的外面.
                for (int i = 0; i < vertices.Count; i++)
                {
                    if (i == cur || i == prev || i == next)
                        continue;
                    
                    var pos = polygon[vertices[i]];
                    if (pos.PointInTriangle(curPos, nextPos, prevPos))
                        return false;
                }
                

                return true;
            }
            
            triangles.Clear();
            
            int vertexCount = polygon.Count;
            if (vertexCount < 3)
            {
                Debug.LogError("Polygon must have at least 3 vertices.");
                return;
            }

            using var _ = TempList.Get<int>(out var vertexIndex);
            for(int i = 0; i < vertexCount; i++) vertexIndex.Add(i);
        
            for (int i = 0; i < 2 * vertexIndex.Count && vertexIndex.Count >= 3; i++)
            {
                GetIndex(i, vertexIndex.Count, out var prevIndex, out var curIndex, out var nextIndex);
                
                if (IsEar(polygon, vertexIndex, prevIndex, curIndex, nextIndex))
                {
                    // Debug.LogError($"test ear success: [{vertexIndex[curIndex]}]");
                    
                    triangles.Add(vertexIndex[prevIndex]);
                    triangles.Add(vertexIndex[curIndex]);
                    triangles.Add(vertexIndex[nextIndex]);

                    vertexIndex.RemoveAt(curIndex);
                    i--;
                    vertexCount--;
                    
                    // vertices[i] = vertices.ElementAtRepeated(i - 1);
                }
            }
        }

    }
    
}
